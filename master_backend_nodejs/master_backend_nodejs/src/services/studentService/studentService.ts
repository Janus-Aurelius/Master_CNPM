import { IStudent } from '../../models/student_related/studentInterface';
import { DatabaseService } from '../database/databaseService';

export const studentService = {    async getStudentInfo(studentId: string): Promise<IStudent | null> {        try {
            console.log('üîç [studentService] Getting student info for ID:', studentId);
              // S·ª≠ d·ª•ng b·∫£ng SINHVIEN ƒë·ªÉ t√¨m sinh vi√™n
            let student = await DatabaseService.queryOne(`
                SELECT 
                    s.MaSoSinhVien as "studentId",
                    s.HoTen as "fullName",
                    s.NgaySinh as "dateOfBirth",
                    s.GioiTinh as "gender",
                    s.QueQuan as "hometown",
                    s.MaHuyen as "districtId",
                    s.MaDoiTuongUT as "priorityObjectId",
                    s.MaNganh as "majorId",
                    s.Email as "email",
                    s.SoDienThoai as "phone",
                    'active' as "status",
                    -- Th√™m th√¥ng tin t√™n ng√†nh
                    CASE 
                        WHEN s.MaNganh = 'CNPM' THEN 'C√¥ng ngh·ªá ph·∫ßn m·ªÅm'
                        WHEN s.MaNganh = 'KHMT' THEN 'Khoa h·ªçc m√°y t√≠nh' 
                        WHEN s.MaNganh = 'HTTT' THEN 'H·ªá th·ªëng th√¥ng tin'
                        WHEN s.MaNganh = 'CNTT' THEN 'C√¥ng ngh·ªá th√¥ng tin'
                        WHEN s.MaNganh = 'TMDT' THEN 'Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠'
                        WHEN s.MaNganh = 'KTPM' THEN 'K·ªπ thu·∫≠t ph·∫ßn m·ªÅm'
                        WHEN s.MaNganh = 'VMC' THEN 'Vi·ªÖn th√¥ng Multimedia'
                        WHEN s.MaNganh = 'CNTT_Nhat' THEN 'C√¥ng ngh·ªá th√¥ng tin (ti·∫øng Nh·∫≠t)'
                        ELSE s.MaNganh
                    END as "majorName"
                FROM SINHVIEN s
                WHERE s.MaSoSinhVien = $1            `, [studentId]);

            console.log('üîç [studentService] Raw database result:', student);

            // N·∫øu kh√¥ng t√¨m th·∫•y sinh vi√™n, th·ª≠ fallback mapping t·ª´ b·∫£ng NGUOIDUNG
            if (!student) {
                console.log('‚ö†Ô∏è [studentService] Student not found directly, trying fallback mapping from NGUOIDUNG...');                // Th·ª≠ t√¨m trong b·∫£ng NGUOIDUNG ƒë·ªÉ l·∫•y masosinhvien
                const userToStudentMapping = await DatabaseService.queryOne(`
                    SELECT 
                        n.userid,
                        n.tendangnhap,
                        n.masosinhvien as "mappedStudentId"
                    FROM NGUOIDUNG n
                    WHERE n.userid = $1 OR UPPER(n.tendangnhap) = UPPER($1)
                `, [studentId]);
                
                console.log('üîç [studentService] User mapping result:', userToStudentMapping);
                
                // N·∫øu t√¨m th·∫•y mapping, th·ª≠ query l·∫°i b·∫£ng SINHVIEN
                if (userToStudentMapping?.mappedStudentId) {
                    console.log('üîÑ [studentService] Found mapping, trying with:', userToStudentMapping.mappedStudentId);
                    
                    student = await DatabaseService.queryOne(`
                        SELECT 
                            s.MaSoSinhVien as "studentId",
                            s.HoTen as "fullName",
                            s.NgaySinh as "dateOfBirth",
                            s.GioiTinh as "gender",
                            s.QueQuan as "hometown",
                            s.MaHuyen as "districtId",
                            s.MaDoiTuongUT as "priorityObjectId",
                            s.MaNganh as "majorId",
                            s.Email as "email",
                            s.SoDienThoai as "phone",
                            'active' as "status",
                            CASE 
                                WHEN s.MaNganh = 'CNPM' THEN 'C√¥ng ngh·ªá ph·∫ßn m·ªÅm'
                                WHEN s.MaNganh = 'KHMT' THEN 'Khoa h·ªçc m√°y t√≠nh' 
                                WHEN s.MaNganh = 'HTTT' THEN 'H·ªá th·ªëng th√¥ng tin'
                                WHEN s.MaNganh = 'CNTT' THEN 'C√¥ng ngh·ªá th√¥ng tin'
                                WHEN s.MaNganh = 'TMDT' THEN 'Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠'
                                WHEN s.MaNganh = 'KTPM' THEN 'K·ªπ thu·∫≠t ph·∫ßn m·ªÅm'
                                WHEN s.MaNganh = 'VMC' THEN 'Vi·ªÖn th√¥ng Multimedia'
                                WHEN s.MaNganh = 'CNTT_Nhat' THEN 'C√¥ng ngh·ªá th√¥ng tin (ti·∫øng Nh·∫≠t)'
                                ELSE s.MaNganh
                            END as "majorName"
                        FROM SINHVIEN s
                        WHERE s.MaSoSinhVien = $1
                    `, [userToStudentMapping.mappedStudentId]);
                    
                    console.log('üîç [studentService] Fallback query result:', student);
                }
            }            if (!student) {
                console.log('‚ùå [studentService] No student found even after fallback mapping for ID:', studentId);
                return null;
            }

            const result = {
                studentId: student.studentId,
                fullName: student.fullName,
                dateOfBirth: student.dateOfBirth,
                gender: student.gender,
                hometown: student.hometown,
                districtId: student.districtId,
                priorityObjectId: student.priorityObjectId,
                majorId: student.majorId,
                email: student.email,
                phone: student.phone,
                majorName: student.majorName  // Th√™m t√™n ng√†nh
            };

            console.log('‚úÖ [studentService] Processed result:', result);
            return result;
        } catch (error) {
            console.error('Error getting student info:', error);
            throw error;
        }
    },    async updateStudentInfo(studentId: string, data: Partial<IStudent>): Promise<IStudent | null> {
        try {
            // Check if student exists
            const existingStudent = await this.getStudentInfo(studentId);
            if (!existingStudent) return null;

            // Prepare update data cho b·∫£ng SINHVIEN
            const updateData: Record<string, any> = {};
            if (data.fullName) updateData.HoTen = data.fullName;
            if (data.email) updateData.Email = data.email;
            if (data.phone) updateData.SoDienThoai = data.phone;
            if (data.gender) updateData.GioiTinh = data.gender;
            if (data.hometown) updateData.QueQuan = data.hometown;
            if (data.districtId) updateData.MaHuyen = data.districtId;
            if (data.priorityObjectId) updateData.MaDoiTuongUT = data.priorityObjectId;
            if (data.majorId) updateData.MaNganh = data.majorId;
            if (data.address) updateData.DiaChi = data.address;

            // Update student trong b·∫£ng SINHVIEN
            await DatabaseService.query(`
                UPDATE SINHVIEN 
                SET ${Object.keys(updateData).map((key, index) => `${key} = $${index + 1}`).join(', ')}
                WHERE MaSoSinhVien = $${Object.keys(updateData).length + 1}
            `, [...Object.values(updateData), studentId]);

            // Return updated student
            return this.getStudentInfo(studentId);
        } catch (error) {
            console.error('Error updating student info:', error);
            throw error;
        }
    },    async createStudent(studentData: Omit<IStudent, 'studentId'>): Promise<IStudent> {
        try {
            // Generate student ID
            const studentId = `SV${Date.now().toString().slice(-6)}`;

            // Insert student v√†o b·∫£ng SINHVIEN
            await DatabaseService.query(`
                INSERT INTO SINHVIEN (
                    MaSoSinhVien,
                    HoTen,
                    NgaySinh,
                    GioiTinh,
                    QueQuan,
                    MaHuyen,
                    MaDoiTuongUT,
                    MaNganh,
                    Email,
                    SoDienThoai,
                    DiaChi
                ) VALUES (
                    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
                )
            `, [
                studentId,
                studentData.fullName,
                studentData.dateOfBirth,
                studentData.gender,
                studentData.hometown,
                studentData.districtId,
                studentData.priorityObjectId,
                studentData.majorId,
                studentData.email,
                studentData.phone,
                studentData.address
            ]);

            // Return created student
            const createdStudent = await this.getStudentInfo(studentId);
            if (!createdStudent) {
                throw new Error('Failed to get created student');
            }
            return createdStudent;
        } catch (error) {
            console.error('Error creating student:', error);
            throw error;
        }
    },    async deleteStudent(studentId: string): Promise<boolean> {
        try {
            // Check if student exists
            const existingStudent = await this.getStudentInfo(studentId);
            if (!existingStudent) return false;

            // Delete student t·ª´ b·∫£ng SINHVIEN
            await DatabaseService.query(`
                DELETE FROM SINHVIEN 
                WHERE MaSoSinhVien = $1
            `, [studentId]);

            return true;
        } catch (error) {
            console.error('Error deleting student:', error);
            throw error;
        }
    },

    async getAllStudents(): Promise<IStudent[]> {
        try {
            const students = await DatabaseService.query(`
                SELECT 
                    s.MaSoSinhVien as "studentId",
                    s.HoTen as "fullName",
                    s.NgaySinh as "dateOfBirth",
                    s.GioiTinh as "gender",
                    s.QueQuan as "hometown",
                    s.MaHuyen as "districtId",
                    s.MaDoiTuongUT as "priorityObjectId",
                    s.MaNganh as "majorId",
                    s.Email as "email",
                    s.SoDienThoai as "phone",
                    s.DiaChi as "address",
                    -- Th√™m th√¥ng tin t√™n ng√†nh
                    CASE 
                        WHEN s.MaNganh = 'CNPM' THEN 'C√¥ng ngh·ªá ph·∫ßn m·ªÅm'
                        WHEN s.MaNganh = 'KHMT' THEN 'Khoa h·ªçc m√°y t√≠nh' 
                        WHEN s.MaNganh = 'HTTT' THEN 'H·ªá th·ªëng th√¥ng tin'
                        WHEN s.MaNganh = 'CNTT' THEN 'C√¥ng ngh·ªá th√¥ng tin'
                        WHEN s.MaNganh = 'TMDT' THEN 'Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠'
                        WHEN s.MaNganh = 'KTPM' THEN 'K·ªπ thu·∫≠t ph·∫ßn m·ªÅm'
                        WHEN s.MaNganh = 'VMC' THEN 'Vi·ªÖn th√¥ng Multimedia'
                        WHEN s.MaNganh = 'CNTT_Nhat' THEN 'C√¥ng ngh·ªá th√¥ng tin (ti·∫øng Nh·∫≠t)'
                        ELSE s.MaNganh
                    END as "majorName"
                FROM SINHVIEN s
            `);

            return students.map(student => ({
                studentId: student.studentId,
                fullName: student.fullName,
                dateOfBirth: student.dateOfBirth,
                gender: student.gender,
                hometown: student.hometown,
                districtId: student.districtId,
                priorityObjectId: student.priorityObjectId,
                majorId: student.majorId,
                email: student.email,
                phone: student.phone,
                address: student.address,
                majorName: student.majorName
            }));
        } catch (error) {
            console.error('Error getting all students:', error);
            throw error;
        }
    }
};