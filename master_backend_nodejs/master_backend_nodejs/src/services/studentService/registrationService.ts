import { IRegistration, IRegistrationDetail } from '../../models/student_related/studentEnrollmentInterface';
import { IOfferedCourse } from '../../models/academic_related/openCourse';
import { DatabaseService } from '../database/databaseService';

export const registrationService = {
    // L·∫•y danh s√°ch m√¥n h·ªçc sinh vi√™n ƒë√£ ƒëƒÉng k√Ω trong h·ªçc k·ª≥
    async getRegisteredCourses(studentId: string, semesterId: string): Promise<IRegistrationDetail[]> {
        try {
            const registeredCourses = await DatabaseService.query(`
                SELECT 
                    ct.MaPhieuDangKy as "registrationId",
                    ct.MaMonHoc as "courseId",
                    mh.TenMonHoc as "courseName",
                    mh.SoTiet as "credits",
                    lm.TenLoaiMon as "courseType",
                    COALESCE(ht.SoTienMotTC, 0) as "fee",
                    pd.NgayLap as "registrationDate",
                    hk.TenHocKy as "semesterName"
                FROM CT_PHIEUDANGKY ct
                JOIN PHIEUDANGKY pd ON ct.MaPhieuDangKy = pd.MaPhieuDangKy
                JOIN MONHOC mh ON ct.MaMonHoc = mh.MaMonHoc
                JOIN LOAIMON lm ON mh.MaLoaiMon = lm.MaLoaiMon
                LEFT JOIN HOCPHI_THEOHK ht ON lm.MaLoaiMon = ht.MaLoaiMon AND ht.MaHocKy = ct.MaHocKy
                JOIN HOCKYNAMHOC hk ON pd.MaHocKy = hk.MaHocKy
                WHERE pd.MaSoSinhVien = $1 AND pd.MaHocKy = $2
                ORDER BY ct.MaMonHoc
            `, [studentId, semesterId]);
    
            return registeredCourses.map(course => ({
                registrationId: course.registrationId,
                courseId: course.courseId,
                courseName: course.courseName,
                credits: course.credits,
                courseType: course.courseType,
                fee: course.fee
            }));
        } catch (error) {
            console.error('Error getting registered courses:', error);
            throw error;
        }
    },

    // Ki·ªÉm tra PHIEUDANGKY ƒë√£ t·ªìn t·∫°i ch∆∞a
    async checkRegistrationExists(studentId: string, semesterId: string): Promise<boolean> {
        try {
            const registration = await DatabaseService.queryOne(`
                SELECT MaPhieuDangKy 
                FROM PHIEUDANGKY 
                WHERE MaSoSinhVien = $1 AND MaHocKy = $2
            `, [studentId, semesterId]);
            
            return !!registration;
        } catch (error) {
            console.error('Error checking registration exists:', error);
            throw error;
        }
    },

    // T·∫°o PHIEUDANGKY cho sinh vi√™n
    async createRegistration(studentId: string, semesterId: string, maxCredits: number = 24): Promise<string> {
        try {
            // Ki·ªÉm tra xem ƒë√£ c√≥ PHIEUDANGKY ch∆∞a
            const exists = await this.checkRegistrationExists(studentId, semesterId);
            if (exists) {
                throw new Error('Sinh vi√™n ƒë√£ c√≥ phi·∫øu ƒëƒÉng k√Ω cho h·ªçc k·ª≥ n√†y');
            }

            const newRegistrationId = `PDK_${studentId}_${semesterId}`;
            await DatabaseService.query(`
                INSERT INTO PHIEUDANGKY (MaPhieuDangKy, NgayLap, MaSoSinhVien, MaHocKy, SoTienConLai, SoTinChiToiDa)
                VALUES ($1, NOW(), $2, $3, 0, $4)
            `, [newRegistrationId, studentId, semesterId, maxCredits]);
            
            console.log(`‚úÖ [RegistrationService] Created new registration with ID: ${newRegistrationId}`);
            return newRegistrationId;
        } catch (error) {
            console.error('Error creating registration:', error);
            throw error;
        }
    },

    // L·∫•y danh s√°ch m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω v·ªõi l·ªãch h·ªçc
    async getEnrolledCoursesWithSchedule(studentId: string, semesterId?: string): Promise<any[]> {
        try {
            // Get current semester if not provided
            const actualSemesterId = semesterId || await DatabaseService.getCurrentSemester();
            
            // Ki·ªÉm tra xem c√≥ c·∫ßn convert t·ª´ User ID sang Student ID kh√¥ng
            let actualStudentId = studentId;
            if (studentId.startsWith('U')) {
                const userMapping = await DatabaseService.queryOne(`
                    SELECT n.masosinhvien as "mappedStudentId"
                    FROM NGUOIDUNG n
                    WHERE n.userid = $1 OR UPPER(n.tendangnhap) = UPPER($1)
                `, [studentId]);
                
                if (userMapping && userMapping.mappedStudentId) {
                    actualStudentId = userMapping.mappedStudentId;
                    console.log('‚úÖ [RegistrationService] Converted to Student ID:', actualStudentId);
                } else {
                    console.log('‚ùå [RegistrationService] Could not find mapping for User ID:', studentId);
                    return [];
                }
            }
            
            // Debug: Check all related tables
            const debugPhieuDangKy = await DatabaseService.query(`
                SELECT * FROM PHIEUDANGKY WHERE MaSoSinhVien = $1
            `, [actualStudentId]);
            console.log('üîç [Debug] PHIEUDANGKY records for student:', debugPhieuDangKy);
            
            const debugCtPhieuDangKy = await DatabaseService.query(`
                SELECT ct.*, pd.MaSoSinhVien 
                FROM CT_PHIEUDANGKY ct 
                JOIN PHIEUDANGKY pd ON ct.MaPhieuDangKy = pd.MaPhieuDangKy 
                WHERE pd.MaSoSinhVien = $1
            `, [actualStudentId]);
            console.log('üîç [Debug] CT_PHIEUDANGKY records for student:', debugCtPhieuDangKy);
            
            const enrolledCourses = await DatabaseService.query(`
                SELECT 
                    ct.MaPhieuDangKy as "registrationId",
                    ct.MaMonHoc as "courseId",
                    mh.TenMonHoc as "courseName",
                    mh.SoTiet as "credits",
                    lm.TenLoaiMon as "courseType",
                    COALESCE(ht.SoTienMotTC, 0) as "feePerCredit",
                    pd.NgayLap as "registrationDate",
                    pd.MaHocKy as "semesterName",
                    -- Th√¥ng tin t·ª´ DANHSACHMONHOCMO
                    dsmhm.Thu as "dayOfWeek",
                    dsmhm.TietBatDau as "startPeriod",
                    dsmhm.TietKetThuc as "endPeriod"
                FROM CT_PHIEUDANGKY ct
                JOIN PHIEUDANGKY pd ON ct.MaPhieuDangKy = pd.MaPhieuDangKy
                JOIN MONHOC mh ON ct.MaMonHoc = mh.MaMonHoc
                JOIN LOAIMON lm ON mh.MaLoaiMon = lm.MaLoaiMon
                LEFT JOIN HOCPHI_THEOHK ht ON lm.MaLoaiMon = ht.MaLoaiMon AND ht.MaHocKy = ct.MaHocKy
                LEFT JOIN DANHSACHMONHOCMO dsmhm ON ct.MaMonHoc = dsmhm.MaMonHoc AND ct.MaHocKy = dsmhm.MaHocKy
                WHERE pd.MaSoSinhVien = $1 AND pd.MaHocKy = $2
                ORDER BY ct.MaMonHoc
            `, [actualStudentId, actualSemesterId]);

            console.log('üîç [RegistrationService] Query parameters:', { actualStudentId, actualSemesterId });
            console.log('‚úÖ [RegistrationService] Found enrolled courses:', enrolledCourses.length);
            console.log('üìã [RegistrationService] Enrolled courses data:', enrolledCourses);
              return enrolledCourses.map(course => ({
                id: course.courseId,
                courseId: course.courseId,
                courseName: course.courseName,
                credits: course.credits,
                courseType: course.courseType,
                feePerCredit: course.feePerCredit,
                registrationId: course.registrationId,
                registrationDate: course.registrationDate,
                semesterName: course.semesterName,
                dayOfWeek: course.dayOfWeek,
                startPeriod: course.startPeriod,
                endPeriod: course.endPeriod,
                lecturer: 'Ch∆∞a x√°c ƒë·ªãnh', // B·ªè c·ªôt n√†y v√¨ kh√¥ng c√≥ trong DB
                classroom: 'Ch∆∞a x√°c ƒë·ªãnh', // B·ªè c·ªôt n√†y v√¨ kh√¥ng c√≥ trong DB
                // T√≠nh to√°n th√¥ng tin hi·ªÉn th·ªã
                day: course.dayOfWeek ? `Th·ª© ${course.dayOfWeek}` : 'Ch∆∞a x√°c ƒë·ªãnh',
                fromTo: course.startPeriod && course.endPeriod ? 
                    `Ti·∫øt ${course.startPeriod}-${course.endPeriod}` : 'Ch∆∞a x√°c ƒë·ªãnh',
                fee: course.feePerCredit ? course.feePerCredit * (course.credits / 15 || 1) : 0
            }));
        } catch (error) {
            console.error('‚ùå [RegistrationService] Error getting enrolled courses with schedule:', error);
            throw error;
        }
    },

    // L·∫•y chi ti·∫øt m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω
    async getCourseRegistrationDetails(studentId: string, courseId: string): Promise<IRegistrationDetail | null> {
        try {
            const courseDetail = await DatabaseService.queryOne(`
                SELECT 
                    ct.MaPhieuDangKy as "registrationId",
                    ct.MaMonHoc as "courseId",
                    mh.TenMonHoc as "courseName",
                    mh.SoTiet as "credits",
                    lm.TenLoaiMon as "courseType",
                    COALESCE(ht.SoTienMotTC, 0) as "fee",
                    pd.NgayLap as "registrationDate",
                    hk.TenHocKy as "semesterName"
                FROM CT_PHIEUDANGKY ct
                JOIN PHIEUDANGKY pd ON ct.MaPhieuDangKy = pd.MaPhieuDangKy
                JOIN MONHOC mh ON ct.MaMonHoc = mh.MaMonHoc
                JOIN LOAIMON lm ON mh.MaLoaiMon = lm.MaLoaiMon
                LEFT JOIN HOCPHI_THEOHK ht ON lm.MaLoaiMon = ht.MaLoaiMon AND ht.MaHocKy = ct.MaHocKy
                JOIN HOCKYNAMHOC hk ON pd.MaHocKy = hk.MaHocKy
                WHERE pd.MaSoSinhVien = $1 AND ct.MaMonHoc = $2
            `, [studentId, courseId]);

            if (!courseDetail) return null;

            return {
                registrationId: courseDetail.registrationId,
                courseId: courseDetail.courseId,
                courseName: courseDetail.courseName,
                credits: courseDetail.credits,
                courseType: courseDetail.courseType,
                fee: courseDetail.fee
            };
        } catch (error) {
            console.error('Error getting course registration details:', error);
            throw error;
        }
    },

    // ƒêƒÉng k√Ω m√¥n h·ªçc cho sinh vi√™n
    async registerCourse(studentId: string, courseId: string, semesterId: string): Promise<boolean> {
        try {
            console.log(`üîµ [RegistrationService] registerCourse called with:`, {
                studentId,
                courseId,
                semesterId
            });
            
            // Ki·ªÉm tra m√¥n h·ªçc c√≥ trong danh s√°ch m·ªü kh√¥ng
            console.log(`üîµ [RegistrationService] Checking if course ${courseId} is offered in semester ${semesterId}`);
            const offeredCourse = await DatabaseService.queryOne(`
                SELECT MaHocKy, MaMonHoc 
                FROM DANHSACHMONHOCMO 
                WHERE MaHocKy = $1 AND MaMonHoc = $2
            `, [semesterId, courseId]);

            console.log(`üîµ [RegistrationService] Offered course query result:`, offeredCourse);
            if (!offeredCourse) {
                console.log(`‚ùå [RegistrationService] Course ${courseId} is not offered in semester ${semesterId}`);
                throw new Error('M√¥n h·ªçc n√†y kh√¥ng c√≥ trong danh s√°ch m·ªü');
            }

            // Ki·ªÉm tra sinh vi√™n ƒë√£ c√≥ phi·∫øu ƒëƒÉng k√Ω ch∆∞a
            console.log(`üîµ [RegistrationService] Checking existing registration for student ${studentId}`);
            let registration = await DatabaseService.queryOne(`
                SELECT MaPhieuDangKy 
                FROM PHIEUDANGKY 
                WHERE MaSoSinhVien = $1 AND MaHocKy = $2
            `, [studentId, semesterId]);

            console.log(`üîµ [RegistrationService] Existing registration:`, registration);
            
            // N·∫øu ch∆∞a c√≥ PHIEUDANGKY, kh√¥ng cho ph√©p ƒëƒÉng k√Ω
            if (!registration) {
                console.log(`‚ùå [RegistrationService] No registration found for student ${studentId} in semester ${semesterId}`);
                throw new Error('Ch∆∞a m·ªü ƒëƒÉng k√Ω h·ªçc ph·∫ßn cho h·ªçc k·ª≥ n√†y. Vui l√≤ng li√™n h·ªá ph√≤ng ƒë√†o t·∫°o.');
            }

            // Ki·ªÉm tra ƒë√£ ƒëƒÉng k√Ω m√¥n n√†y ch∆∞a
            console.log(`üîµ [RegistrationService] Checking if course ${courseId} is already registered`);
            const registrationId = registration.maphieudangky || registration.MaPhieuDangKy;
            console.log(`üîµ [RegistrationService] Using registration ID:`, registrationId);
            
            const existingDetail = await DatabaseService.queryOne(`
                SELECT MaPhieuDangKy 
                FROM CT_PHIEUDANGKY 
                WHERE MaPhieuDangKy = $1 AND MaMonHoc = $2
            `, [registrationId, courseId]);

            console.log(`üîµ [RegistrationService] Existing detail:`, existingDetail);
            if (existingDetail) {
                console.log(`‚ùå [RegistrationService] Course ${courseId} is already registered`);
                throw new Error('B·∫°n ƒë√£ ƒëƒÉng k√Ω m√¥n h·ªçc n√†y r·ªìi!');
            }

            // Ki·ªÉm tra tr√πng l·ªãch h·ªçc
            console.log(`üîµ [RegistrationService] Checking schedule conflicts for course ${courseId}`);
            const newCourseSchedule = await DatabaseService.queryOne(`
                SELECT Thu as "thu", TietBatDau as "tietBatDau", TietKetThuc as "tietKetThuc", MaMonHoc as "maMonHoc"
                FROM DANHSACHMONHOCMO
                WHERE MaHocKy = $1 AND MaMonHoc = $2
            `, [semesterId, courseId]);

            if (newCourseSchedule) {
                console.log(`üîµ [RegistrationService] New course schedule:`, newCourseSchedule);
                
                // L·∫•y t·∫•t c·∫£ m√¥n h·ªçc ƒë√£ ƒëƒÉng k√Ω c·ªßa sinh vi√™n trong k·ª≥ n√†y
                console.log(`üîç [RegistrationService] Query for registered courses with params: registrationId=${registrationId}, semesterId=${semesterId}`);
                const registeredCourses = await DatabaseService.query(`
                    SELECT ds.Thu as "thu", ds.TietBatDau as "tietBatDau", ds.TietKetThuc as "tietKetThuc", 
                           ds.MaMonHoc as "maMonHoc", mh.TenMonHoc as "tenMonHoc"
                    FROM CT_PHIEUDANGKY ct
                    JOIN DANHSACHMONHOCMO ds ON ct.MaMonHoc = ds.MaMonHoc AND ct.MaHocKy = ds.MaHocKy
                    JOIN MONHOC mh ON ds.MaMonHoc = mh.MaMonHoc
                    WHERE ct.MaPhieuDangKy = $1 AND ct.MaHocKy = $2
                `, [registrationId, semesterId]);

                console.log(`üîµ [RegistrationService] Already registered courses:`, registeredCourses);

                // Ki·ªÉm tra xung ƒë·ªôt l·ªãch h·ªçc
                for (const existingCourse of registeredCourses) {
                    console.log(`üîç [RegistrationService] Checking conflict: New(Thu=${newCourseSchedule.thu}, ${newCourseSchedule.tietBatDau}-${newCourseSchedule.tietKetThuc}) vs Existing(Thu=${existingCourse.thu}, ${existingCourse.tietBatDau}-${existingCourse.tietKetThuc})`);
                    
                    if (existingCourse.thu === newCourseSchedule.thu) {
                        // Ki·ªÉm tra tr√πng ti·∫øt h·ªçc
                        const newStart = newCourseSchedule.tietBatDau;
                        const newEnd = newCourseSchedule.tietKetThuc;
                        const existingStart = existingCourse.tietBatDau;
                        const existingEnd = existingCourse.tietKetThuc;

                        // Ki·ªÉm tra overlap: c√≥ b·∫•t k·ª≥ ti·∫øt n√†o tr√πng kh√¥ng
                        // Overlap x·∫£y ra khi c√°c kho·∫£ng th·ªùi gian giao nhau
                        // [newStart, newEnd] v√† [existingStart, existingEnd] giao nhau khi:
                        // newStart <= existingEnd && existingStart <= newEnd
                        console.log(`üîç [RegistrationService] Conflict check details: newStart=${newStart}, newEnd=${newEnd}, existingStart=${existingStart}, existingEnd=${existingEnd}`);
                          if (newStart <= existingEnd && existingStart <= newEnd) {
                            console.log(`‚ùå [RegistrationService] Schedule conflict detected with course ${existingCourse.maMonHoc}`);
                            throw new Error(`Kh√¥ng th·ªÉ ƒëƒÉng k√Ω v√¨ tr√πng l·ªãch h·ªçc v·ªõi m√¥n "${existingCourse.tenMonHoc}" (Th·ª© ${existingCourse.thu}, ti·∫øt ${existingStart}-${existingEnd})`);
                        } else {
                            console.log(`‚úÖ [RegistrationService] No conflict with course ${existingCourse.maMonHoc}`);
                        }
                    }
                }
            }            // Th√™m m√¥n h·ªçc v√†o chi ti·∫øt phi·∫øu ƒëƒÉng k√Ω
            console.log(`üîµ [RegistrationService] Adding course ${courseId} to registration details`);
            await DatabaseService.query(`
                INSERT INTO CT_PHIEUDANGKY (MaPhieuDangKy, MaHocKy, MaMonHoc)
                VALUES ($1, $2, $3)
            `, [registrationId, semesterId, courseId]);
            // C·∫≠p nh·∫≠t s·ªë SV ƒë√£ ƒëƒÉng k√Ω trong DANHSACHMONHOCMO
            await DatabaseService.query(
                `UPDATE DANHSACHMONHOCMO SET SoSVDaDangKy = SoSVDaDangKy + 1 WHERE MaHocKy = $1 AND MaMonHoc = $2`,
                [semesterId, courseId]
            );
            
            console.log(`‚úÖ [RegistrationService] Successfully added course to registration details`);
            
            // C·∫≠p nh·∫≠t s·ªë ti·ªÅn ƒëƒÉng k√Ω
            console.log(`üîµ [RegistrationService] Getting course info for fee calculation`);
            const courseInfo = await DatabaseService.queryOne(`
                SELECT 
                    COALESCE(ht.SoTienMotTC, 0) as "sotienmottc",
                    mh.SoTiet as "sotiet", 
                    lm.SoTietMotTC as "sotietmottc"
                FROM MONHOC mh
                JOIN LOAIMON lm ON mh.MaLoaiMon = lm.MaLoaiMon
                LEFT JOIN HOCPHI_THEOHK ht ON lm.MaLoaiMon = ht.MaLoaiMon AND ht.MaHocKy = $1
                WHERE mh.MaMonHoc = $2
            `, [semesterId, courseId]);

            if (courseInfo) {
                const courseFee = courseInfo.sotienmottc * ((courseInfo.sotiet / courseInfo.sotietmottc) || 1);
                
                // Schema ch·ªâ c√≥ SoTienConLai, kh√¥ng c√≥ SoTienDangKy/SoTienPhaiDong
                // T·∫°m th·ªùi skip vi·ªác update s·ªë ti·ªÅn, ch·ªâ log
                console.log(`üí∞ [RegistrationService] Course fee calculated: ${courseFee} for course ${courseId}`);
                
                // N·∫øu c·∫ßn update SoTienConLai, uncomment d√≤ng d∆∞·ªõi:
                // await DatabaseService.query(`UPDATE PHIEUDANGKY SET SoTienConLai = SoTienConLai - $1 WHERE MaPhieuDangKy = $2`, [courseFee, registrationId]);
            }            // Log ƒëƒÉng k√Ω
            const student = await DatabaseService.queryOne(
                `SELECT HoTen as "studentName" FROM SINHVIEN WHERE MaSoSinhVien = $1`, [studentId]
            );
            const course = await DatabaseService.queryOne(
                `SELECT TenMonHoc as "courseName" FROM MONHOC WHERE MaMonHoc = $1`, [courseId]
            );

            console.log(`üîç [RegistrationService] Log data - Student:`, student, `Course:`, course);

            await DatabaseService.query(
                `INSERT INTO REGISTRATION_LOG (MaSoSinhVien, TenSinhVien, MaMonHoc, TenMonHoc, LoaiYeuCau)
                 VALUES ($1, $2, $3, $4, 'register')`,
                [studentId, student?.studentName || 'Unknown Student', courseId, course?.courseName || 'Unknown Course']
            );

            return true;
        } catch (error) {
            console.error('Error registering course:', error);
            throw error;
        }    },

    // H·ªßy ƒëƒÉng k√Ω m√¥n h·ªçc
    async cancelCourseRegistration(studentId: string, courseId: string, semesterId: string): Promise<boolean> {
        try {
            console.log(`üîç [RegistrationService] Cancelling registration: Student=${studentId}, Course=${courseId}, Semester=${semesterId}`);            // T√¨m phi·∫øu ƒëƒÉng k√Ω c·ªßa sinh vi√™n trong h·ªçc k·ª≥
            const registration = await DatabaseService.queryOne(`
                SELECT MaPhieuDangKy as "registrationId"
                FROM PHIEUDANGKY 
                WHERE MaSoSinhVien = $1 AND MaHocKy = $2
            `, [studentId, semesterId]);

            console.log(`üîç [RegistrationService] Found registration:`, registration);

            if (!registration) {
                throw new Error('Kh√¥ng t√¨m th·∫•y phi·∫øu ƒëƒÉng k√Ω');
            }

            const registrationId = registration.registrationId;
            console.log(`üîç [RegistrationService] Using registration ID: ${registrationId}`);

            // Ki·ªÉm tra m√¥n h·ªçc c√≥ trong chi ti·∫øt phi·∫øu ƒëƒÉng k√Ω kh√¥ng
            const registrationDetail = await DatabaseService.queryOne(`
                SELECT MaPhieuDangKy
                FROM CT_PHIEUDANGKY
                WHERE MaPhieuDangKy = $1 AND MaMonHoc = $2
            `, [registrationId, courseId]);

            console.log(`üîç [RegistrationService] Found registration detail:`, registrationDetail);

            if (!registrationDetail) {
                throw new Error('Sinh vi√™n ch∆∞a ƒëƒÉng k√Ω m√¥n h·ªçc n√†y');
            }            // X√≥a m√¥n h·ªçc kh·ªèi chi ti·∫øt phi·∫øu ƒëƒÉng k√Ω
            await DatabaseService.query(`
                DELETE FROM CT_PHIEUDANGKY
                WHERE MaPhieuDangKy = $1 AND MaMonHoc = $2
            `, [registrationId, courseId]);
            // C·∫≠p nh·∫≠t s·ªë SV ƒë√£ ƒëƒÉng k√Ω trong DANHSACHMONHOCMO
            await DatabaseService.query(
                `UPDATE DANHSACHMONHOCMO SET SoSVDaDangKy = GREATEST(SoSVDaDangKy - 1, 0) WHERE MaHocKy = $1 AND MaMonHoc = $2`,
                [semesterId, courseId]
            );

            console.log(`‚úÖ [RegistrationService] Successfully deleted course ${courseId} from registration ${registrationId}`);

            // Ki·ªÉm tra xem c√≤n m√¥n h·ªçc n√†o trong phi·∫øu ƒëƒÉng k√Ω kh√¥ng
            const remainingCourses = await DatabaseService.queryOne(`
                SELECT COUNT(*) as count
                FROM CT_PHIEUDANGKY
                WHERE MaPhieuDangKy = $1
            `, [registrationId]);

            console.log(`üîç [RegistrationService] Remaining courses in registration: ${remainingCourses?.count || 0}`);

            // N·∫øu kh√¥ng c√≤n m√¥n h·ªçc n√†o, c√≥ th·ªÉ x√≥a lu√¥n phi·∫øu ƒëƒÉng k√Ω (t√πy business logic)
            // T·∫°m th·ªùi comment ƒë·ªÉ gi·ªØ l·∫°i phi·∫øu ƒëƒÉng k√Ω tr·ªëng
            /*
            if (remainingCourses?.count === 0) {
                await DatabaseService.query(`
                    DELETE FROM PHIEUDANGKY
                    WHERE MaPhieuDangKy = $1
                `, [registrationId]);
                console.log(`üóëÔ∏è [RegistrationService] Deleted empty registration ${registrationId}`);
            }
            */// C·∫≠p nh·∫≠t l·∫°i s·ªë ti·ªÅn trong phi·∫øu ƒëƒÉng k√Ω
            const courseInfo = await DatabaseService.queryOne(`
                SELECT 
                    COALESCE(ht.SoTienMotTC, 0) as "SoTienMotTC", 
                    mh.SoTiet, 
                    lm.SoTietMotTC
                FROM MONHOC mh
                JOIN LOAIMON lm ON mh.MaLoaiMon = lm.MaLoaiMon
                LEFT JOIN HOCPHI_THEOHK ht ON lm.MaLoaiMon = ht.MaLoaiMon AND ht.MaHocKy = $1
                WHERE mh.MaMonHoc = $2
            `, [semesterId, courseId]);

            if (courseInfo) {
                const courseFee = courseInfo.SoTienMotTC * (courseInfo.SoTiet / courseInfo.SoTietMotTC || 1);                // Schema ch·ªâ c√≥ SoTienConLai, skip update s·ªë ti·ªÅn t·∫°m th·ªùi
                console.log(`üí∞ [RegistrationService] Course fee to refund: ${courseFee} for course ${courseId}`);
                
                // N·∫øu c·∫ßn update SoTienConLai, uncomment d√≤ng d∆∞·ªõi:
                // await DatabaseService.query(`UPDATE PHIEUDANGKY SET SoTienConLai = SoTienConLai + $1 WHERE MaPhieuDangKy = $2`, [courseFee, registrationId]);
            }            // Log h·ªßy ƒëƒÉng k√Ω
            const student = await DatabaseService.queryOne(
                `SELECT HoTen as "studentName" FROM SINHVIEN WHERE MaSoSinhVien = $1`, [studentId]
            );
            const course = await DatabaseService.queryOne(
                `SELECT TenMonHoc as "courseName" FROM MONHOC WHERE MaMonHoc = $1`, [courseId]
            );

            console.log(`üîç [RegistrationService] Log data - Student:`, student, `Course:`, course);

            await DatabaseService.query(
                `INSERT INTO REGISTRATION_LOG (MaSoSinhVien, TenSinhVien, MaMonHoc, TenMonHoc, LoaiYeuCau)
                 VALUES ($1, $2, $3, $4, 'cancel')`,
                [studentId, student?.studentName || 'Unknown Student', courseId, course?.courseName || 'Unknown Course']
            );

            console.log(`‚úÖ [RegistrationService] Successfully cancelled registration for course ${courseId} (${course?.courseName || 'Unknown'}) for student ${studentId}`);

            return true;} catch (error) {
            console.error('Error canceling course registration:', error);
            throw error;
        }
    },

    // L·∫•y l·ªãch s·ª≠ ƒëƒÉng k√Ω c·ªßa sinh vi√™n
    async getRegistrationHistory(studentId: string): Promise<IRegistration[]> {        try {
            const registrations = await DatabaseService.query(`
                SELECT 
                    pd.MaPhieuDangKy as "registrationId",
                    pd.NgayLap as "registrationDate",
                    pd.MaSoSinhVien as "studentId",
                    pd.MaHocKy as "semesterId",
                    pd.SoTienConLai as "remainingAmount",
                    pd.SoTinChiToiDa as "maxCredits"
                FROM PHIEUDANGKY pd
                WHERE pd.MaSoSinhVien = $1
                ORDER BY pd.NgayLap DESC
            `, [studentId]);

            return registrations;
        } catch (error) {
            console.error('Error getting registration history:', error);
            throw error;
        }
    },

    // Ki·ªÉm tra sinh vi√™n ƒë√£ ƒëƒÉng k√Ω m√¥n h·ªçc ch∆∞a
    async checkCourseRegistrationStatus(studentId: string, courseId: string, semesterId: string): Promise<boolean> {
        try {
            const registration = await DatabaseService.queryOne(`
                SELECT ct.MaPhieuDangKy
                FROM CT_PHIEUDANGKY ct
                JOIN PHIEUDANGKY pd ON ct.MaPhieuDangKy = pd.MaPhieuDangKy
                WHERE pd.MaSoSinhVien = $1 AND ct.MaMonHoc = $2 AND pd.MaHocKy = $3
            `, [studentId, courseId, semesterId]);

            return !!registration;
        } catch (error) {
            console.error('Error checking course registration status:', error);
            throw error;
        }
    },    // L·∫•y danh s√°ch m√¥n h·ªçc c√≥ th·ªÉ ƒëƒÉng k√Ω (DANHSACHMONHOCMO)
    async getAvailableCourses(semesterId: string): Promise<IOfferedCourse[]> {
        try {
            const availableCourses = await DatabaseService.query(`
                SELECT 
                    dsm.MaHocKy as "semesterId",
                    dsm.MaMonHoc as "courseId",
                    mh.TenMonHoc as "courseName",
                    mh.SoTiet as "credits",
                    lm.TenLoaiMon as "courseType",
                    COALESCE(ht.SoTienMotTC, 0) as "feePerCredit",
                    dsm.SoSVDaDangKy as "currentEnrollment",
                    dsm.SiSoToiDa as "maxEnrollment"
                FROM DANHSACHMONHOCMO dsm
                JOIN MONHOC mh ON dsm.MaMonHoc = mh.MaMonHoc
                JOIN LOAIMON lm ON mh.MaLoaiMon = lm.MaLoaiMon
                LEFT JOIN HOCPHI_THEOHK ht ON lm.MaLoaiMon = ht.MaLoaiMon AND ht.MaHocKy = dsm.MaHocKy
                WHERE dsm.MaHocKy = $1
                ORDER BY mh.TenMonHoc
            `, [semesterId]);

            return availableCourses;
        } catch (error) {
            console.error('Error getting available courses:', error);
            throw error;
        }
    },    // ƒêƒÉng k√Ω nhi·ªÅu m√¥n h·ªçc c√πng l√∫c
    async registerCourses(data: { studentId: string; courseIds: string[]; semesterId: string }): Promise<{ success: boolean; message: string; details?: any }> {
        try {
            console.log('üîµ [RegistrationService] registerCourses called with:', data);
            
            const { studentId, courseIds, semesterId } = data;
            const results = [];
            let successCount = 0;
            let failCount = 0;

            for (const courseId of courseIds) {
                try {
                    console.log(`üîµ [RegistrationService] Registering course ${courseId} for student ${studentId}`);
                    await this.registerCourse(studentId, courseId, semesterId);
                    results.push({ courseId, success: true, message: 'ƒêƒÉng k√Ω th√†nh c√¥ng' });
                    successCount++;
                    console.log(`‚úÖ [RegistrationService] Successfully registered course ${courseId}`);
                } catch (error) {
                    console.error(`‚ùå [RegistrationService] Failed to register course ${courseId}:`, error);
                    const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                    results.push({ courseId, success: false, message: errorMessage });
                    failCount++;
                }
            }

            // N·∫øu ch·ªâ ƒëƒÉng k√Ω 1 m√¥n v√† th·∫•t b·∫°i, tr·∫£ v·ªÅ th√¥ng b√°o l·ªói c·ª• th·ªÉ
            if (courseIds.length === 1 && failCount === 1) {
                const failedResult = results[0];
                return {
                    success: false,
                    message: failedResult.message,
                    details: results
                };
            }

            const result = {
                success: successCount > 0,
                message: failCount > 0 ? 
                    `ƒêƒÉng k√Ω th√†nh c√¥ng ${successCount}/${courseIds.length} m√¥n h·ªçc. ${failCount} m√¥n th·∫•t b·∫°i.` :
                    `ƒêƒÉng k√Ω th√†nh c√¥ng ${successCount}/${courseIds.length} m√¥n h·ªçc`,
                details: results
            };
            
            console.log('üîµ [RegistrationService] Final result:', result);
            return result;
        } catch (error) {
            console.error('‚ùå [RegistrationService] Error registering multiple courses:', error);
            throw error;
        }
    },

    // H·ªßy ƒëƒÉng k√Ω m√¥n h·ªçc (alias cho cancelCourseRegistration)
    async unregisterCourse(studentId: string, courseId: string, semesterId: string): Promise<boolean> {
        return await this.cancelCourseRegistration(studentId, courseId, semesterId);
    },

    // L·∫•y th√¥ng tin phi·∫øu ƒëƒÉng k√Ω
    async getRegistrationInfo(studentId: string, semesterId: string): Promise<IRegistration | null> {
        try {
            const registration = await DatabaseService.queryOne(`
                SELECT 
                    pd.MaPhieuDangKy as "registrationId",
                    pd.NgayLap as "registrationDate",
                    pd.MaSoSinhVien as "studentId",
                    pd.MaHocKy as "semesterId",
                    pd.SoTienConLai as "remainingAmount",
                    pd.SoTinChiToiDa as "maxCredits",
                    pd.XacNhan as "isConfirmed"
                FROM PHIEUDANGKY pd
                WHERE pd.MaSoSinhVien = $1 AND pd.MaHocKy = $2
            `, [studentId, semesterId]);

            return registration;
        } catch (error) {
            console.error('Error getting registration info:', error);
            throw error;
        }
    },

    // X√°c nh·∫≠n ƒëƒÉng k√Ω (c·∫≠p nh·∫≠t tr∆∞·ªùng XacNhan)
    async confirmRegistration(studentId: string, semesterId: string): Promise<{ success: boolean; message: string }> {
        try {
            console.log(`üîµ [RegistrationService] confirmRegistration called with:`, {
                studentId,
                semesterId
            });

            // Ki·ªÉm tra phi·∫øu ƒëƒÉng k√Ω c√≥ t·ªìn t·∫°i kh√¥ng
            const registration = await DatabaseService.queryOne(`
                SELECT MaPhieuDangKy, XacNhan
                FROM PHIEUDANGKY 
                WHERE MaSoSinhVien = $1 AND MaHocKy = $2
            `, [studentId, semesterId]);

            if (!registration) {
                throw new Error('Kh√¥ng t√¨m th·∫•y phi·∫øu ƒëƒÉng k√Ω cho h·ªçc k·ª≥ n√†y');
            }

            // Ki·ªÉm tra ƒë√£ x√°c nh·∫≠n ch∆∞a
            if (registration.xacnhan || registration.XacNhan) {
                throw new Error('Phi·∫øu ƒëƒÉng k√Ω ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥');
            }

            // Ki·ªÉm tra c√≥ m√¥n h·ªçc n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω kh√¥ng
            const enrolledCourses = await DatabaseService.query(`
                SELECT COUNT(*) as count
                FROM CT_PHIEUDANGKY
                WHERE MaPhieuDangKy = $1
            `, [registration.maphieudangky || registration.MaPhieuDangKy]);

            if (enrolledCourses[0].count === 0) {
                throw new Error('Kh√¥ng th·ªÉ x√°c nh·∫≠n khi ch∆∞a ƒëƒÉng k√Ω m√¥n h·ªçc n√†o');
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c nh·∫≠n
            await DatabaseService.query(`
                UPDATE PHIEUDANGKY 
                SET XacNhan = true 
                WHERE MaPhieuDangKy = $1
            `, [registration.maphieudangky || registration.MaPhieuDangKy]);

            console.log(`‚úÖ [RegistrationService] Registration confirmed successfully`);
            
            return {
                success: true,
                message: 'X√°c nh·∫≠n ƒëƒÉng k√Ω th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('Error confirming registration:', error);
            throw error;
        }
    },

    // Ki·ªÉm tra tr·∫°ng th√°i x√°c nh·∫≠n
    async checkConfirmationStatus(studentId: string, semesterId: string): Promise<{ isConfirmed: boolean; message: string }> {
        try {
            const registration = await DatabaseService.queryOne(`
                SELECT XacNhan
                FROM PHIEUDANGKY 
                WHERE MaSoSinhVien = $1 AND MaHocKy = $2
            `, [studentId, semesterId]);

            if (!registration) {
                return {
                    isConfirmed: false,
                    message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu ƒëƒÉng k√Ω'
                };
            }

            const isConfirmed = registration.xacnhan || registration.XacNhan || false;
            
            return {
                isConfirmed,
                message: isConfirmed ? 'ƒê√£ x√°c nh·∫≠n ƒëƒÉng k√Ω' : 'Ch∆∞a x√°c nh·∫≠n ƒëƒÉng k√Ω'
            };
        } catch (error) {
            console.error('Error checking confirmation status:', error);
            throw error;
        }
    },

    // L·∫•y m√¥n h·ªçc theo ch∆∞∆°ng tr√¨nh h·ªçc c·ªßa sinh vi√™n
    async getRecommendedCourses(studentId: string, semesterId: string): Promise<any[]> {
        try {
            console.log('üéØ [RegistrationService] Getting recommended courses for student:', studentId, 'semester:', semesterId);
            
            // Ki·ªÉm tra xem c√≥ c·∫ßn convert t·ª´ User ID sang Student ID kh√¥ng
            let actualStudentId = studentId;
            
            // N·∫øu studentId b·∫Øt ƒë·∫ßu b·∫±ng 'U' (User ID), convert sang Student ID
            if (studentId.startsWith('U')) {
                console.log('üîÑ [RegistrationService] Converting User ID to Student ID...');
                const userMapping = await DatabaseService.queryOne(`
                    SELECT 
                        n.userid,
                        n.tendangnhap,
                        n.masosinhvien as "mappedStudentId"
                    FROM NGUOIDUNG n
                    WHERE n.userid = $1 OR UPPER(n.tendangnhap) = UPPER($1)
                `, [studentId]);
                
                console.log('üîç [RegistrationService] User mapping result:', userMapping);
                
                if (userMapping && userMapping.mappedStudentId) {
                    actualStudentId = userMapping.mappedStudentId;
                    console.log('‚úÖ [RegistrationService] Converted to Student ID:', actualStudentId);
                } else {
                    console.log('‚ùå [RegistrationService] Could not find mapping for User ID:', studentId);
                    return [];
                }
            }
            
            console.log('üîç [RegistrationService] Using Student ID:', actualStudentId);
            
            // Tr∆∞·ªõc ti√™n ki·ªÉm tra c√≥ d·ªØ li·ªáu trong DANHSACHMONHOCMO kh√¥ng
            const totalCourses = await DatabaseService.queryOne(`
                SELECT COUNT(*) as count FROM DANHSACHMONHOCMO WHERE MaHocKy = $1
            `, [semesterId]);
            console.log('üìä [RegistrationService] Total courses in DANHSACHMONHOCMO for semester:', totalCourses);
            
            if (!totalCourses || totalCourses.count === 0) {
                console.log('‚ùå [RegistrationService] No courses found in DANHSACHMONHOCMO for semester:', semesterId);
                return [];
            }
            
            // L·∫•y ng√†nh c·ªßa sinh vi√™n
            const student = await DatabaseService.queryOne(`
                SELECT sv.MaNganh, nh.TenNganh
                FROM SINHVIEN sv
                JOIN NGANHHOC nh ON sv.MaNganh = nh.MaNganh
                WHERE sv.MaSoSinhVien = $1
            `, [actualStudentId]);

            if (!student) {
                console.log('‚ùå [RegistrationService] Student not found with ID:', actualStudentId);
                return [];
            }
            
            console.log('üë®‚Äçüéì [RegistrationService] Student major:', student);
            
            // L·∫•y t·∫•t c·∫£ m√¥n h·ªçc m·ªü trong h·ªçc k·ª≥ v√† ph√¢n lo·∫°i theo ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o
            console.log('üîç [RegistrationService] Getting all available courses with program classification...');
            console.log('üîç [RegistrationService] Query parameters:', [semesterId, student.manganh]);
            
            const availableCourses = await DatabaseService.query(`
                SELECT 
                    dsmhm.MaHocKy as "semesterId",
                    dsmhm.MaMonHoc as "courseId",
                    mh.TenMonHoc as "courseName",
                    mh.SoTiet as "credits",
                    COALESCE(ht.SoTienMotTC, 0) as "pricePerCredit",
                    lm.TenLoaiMon as "courseType",
                    dsmhm.Thu as "dayOfWeek",
                    dsmhm.TietBatDau as "startPeriod",
                    dsmhm.TietKetThuc as "endPeriod",
                    dsmhm.SiSoToiThieu as "minStudents",
                    dsmhm.SiSoToiDa as "maxStudents",
                    dsmhm.SoSVDaDangKy as "currentEnrollment",
                    CASE 
                        WHEN EXISTS (
                            SELECT 1 FROM CHUONGTRINHHOC cth 
                            WHERE cth.MaMonHoc = dsmhm.MaMonHoc 
                            AND cth.MaNganh = $2
                            AND cth.MaHocKy = $1
                        ) THEN 'inProgram'
                        ELSE 'notInProgram'
                    END as "courseCategory"
                FROM DANHSACHMONHOCMO dsmhm
                JOIN MONHOC mh ON dsmhm.MaMonHoc = mh.MaMonHoc
                JOIN LOAIMON lm ON mh.MaLoaiMon = lm.MaLoaiMon
                LEFT JOIN HOCPHI_THEOHK ht ON lm.MaLoaiMon = ht.MaLoaiMon AND ht.MaHocKy = dsmhm.MaHocKy
                WHERE dsmhm.MaHocKy = $1
                ORDER BY 
                    CASE 
                        WHEN EXISTS (
                            SELECT 1 FROM CHUONGTRINHHOC cth 
                            WHERE cth.MaMonHoc = dsmhm.MaMonHoc 
                            AND cth.MaNganh = $2
                            AND cth.MaHocKy = $1
                        ) THEN 0 
                        ELSE 1 
                    END,
                    mh.TenMonHoc
            `, [semesterId, student.manganh]);
            
            console.log('üîç [RegistrationService] Query result:', availableCourses);
            return availableCourses;
        } catch (error) {
            console.error('‚ùå [RegistrationService] Error getting recommended courses:', error);
            throw error;
        }
    }
};
            